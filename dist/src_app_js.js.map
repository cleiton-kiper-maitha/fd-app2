{"version":3,"sources":["webpack://app2/./src/Hello.jsx","webpack://app2/./src/app.js"],"names":["Hello","ref","onChange","useState","name","setName","useEffect","resetInput","useImperativeHandle","event","target","value","forwardRef","MyComponent","React","shadow","attachShadow","mode","getAttribute","current","handleDispatchEvent","CustomEvent","detail","dispatchEvent","ReactDOM","HTMLElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,OAAeC,GAAf,EAAuB;AAAA,MAApBC,QAAoB,QAApBA,QAAoB;;AACnC,kBAAwBC,+CAAQ,EAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AAEAC,kDAAS,CAAC,YAAM;AACdJ,YAAQ,IAAIA,QAAQ,CAACE,IAAD,CAApB;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,MAAMG,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBF,WAAO,CAAC,EAAD,CAAP;AACD,GAFD;;AAIAG,4DAAmB,CAACP,GAAD,EAAM;AAAA,WAAO;AAACM,gBAAU,EAAVA;AAAD,KAAP;AAAA,GAAN,CAAnB;AAEA,sBAAO,qFACL,gFAAUH,IAAV,CADK,eAEL;AAAO,YAAQ,EAAE,kBAACK,KAAD;AAAA,aAAWJ,OAAO,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAlB;AAAA,KAAjB;AAAyD,SAAK,EAAEP,IAAI,IAAI;AAAxE,IAFK,CAAP;AAID,CAjBD;;AAmBA,8EAAeQ,iDAAU,CAACZ,KAAD,CAAzB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAEA;;IAEMa,W;;;;;AACJ,yBAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKZ,GAAL,gBAAWa,sDAAA,EAAX;AACA,UAAKC,MAAL,GAAc,MAAKC,YAAL,CAAkB;AAACC,UAAI,EAAC;AAAN,KAAlB,CAAd;AAJY;AAKb;;;;SAED,eAAY;AACV,aAAO,KAAKC,YAAL,CAAkB,OAAlB,CAAP;AACD;;;WACD,iBAAQ;AACN,WAAKjB,GAAL,CAASkB,OAAT,CAAiBZ,UAAjB;AACD;;;WAED,6BAAoB;AAAA;;AAClB,UAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAChB,IAAD,EAAU;AACpC,YAAMK,KAAK,GAAG,IAAIY,WAAJ,CAAgB,mBAAhB,EAAqC;AAAEC,gBAAM,EAAElB;AAAV,SAArC,CAAd;;AACA,cAAI,CAACmB,aAAL,CAAmBd,KAAnB;AACD,OAHD;;AAKAe,6DAAA,eAAgB,2DAAC,2CAAD;AAAO,gBAAQ,EAAEJ,mBAAjB;AAAsC,WAAG,EAAE,KAAKnB;AAAhD,QAAhB,EAAyE,KAAKc,MAA9E;AACD;;;;iCAtBuBU,W;;AAyB1B,iEAAeZ,WAAf,E","file":"src_app_js.js","sourcesContent":["import React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\n\nconst Hello = ({ onChange }, ref) => {\n  const [name, setName] = useState();\n\n  useEffect(() => {\n    onChange && onChange(name);\n  }, [name])\n\n  const resetInput = () => {\n    setName(\"\");\n  }\n\n  useImperativeHandle(ref, () => ({resetInput}))\n\n  return <div>\n    <p>Hello {name}</p>\n    <input onChange={(event) => setName(event.target.value)} value={name || \"\"} />\n  </div>\n}\n\nexport default forwardRef(Hello);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Hello from \"./Hello\";\n\nclass MyComponent extends HTMLElement {\n  constructor() {\n    super(); \n\n    this.ref = React.createRef();\n    this.shadow = this.attachShadow({mode:\"closed\"})\n  }\n\n  get teste() {\n    return this.getAttribute(\"teste\");\n  }\n  reset() {\n    this.ref.current.resetInput();\n  }\n\n  connectedCallback() {\n    const handleDispatchEvent = (name) => {\n      const event = new CustomEvent(\"change-hello-name\", { detail: name });\n      this.dispatchEvent(event);\n    }\n\n    ReactDOM.render(<Hello onChange={handleDispatchEvent} ref={this.ref} />, this.shadow);\n  }\n}\n\nexport default MyComponent;"],"sourceRoot":""}